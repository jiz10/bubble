// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.bubble.domain;

import ar.com.bubble.domain.Validacion;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Validacion_Roo_Finder {
    
    public static Long Validacion.countFindValidacionsByUserEquals(String user) {
        if (user == null || user.length() == 0) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = Validacion.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Validacion AS o WHERE o.user = :user", Long.class);
        q.setParameter("user", user);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Validacion> Validacion.findValidacionsByUserEquals(String user) {
        if (user == null || user.length() == 0) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = Validacion.entityManager();
        TypedQuery<Validacion> q = em.createQuery("SELECT o FROM Validacion AS o WHERE o.user = :user", Validacion.class);
        q.setParameter("user", user);
        return q;
    }
    
    public static TypedQuery<Validacion> Validacion.findValidacionsByUserEquals(String user, String sortFieldName, String sortOrder) {
        if (user == null || user.length() == 0) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = Validacion.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Validacion AS o WHERE o.user = :user");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Validacion> q = em.createQuery(queryBuilder.toString(), Validacion.class);
        q.setParameter("user", user);
        return q;
    }
    
}
