// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.bubble.domain;

import ar.com.bubble.domain.PM;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PM_Roo_Jpa_ActiveRecord {
    
    public static final List<String> PM.fieldNames4OrderClauseFilter = java.util.Arrays.asList("destinatario");
    
    public static long PM.countPMS() {
        return entityManager().createQuery("SELECT COUNT(o) FROM PM o", Long.class).getSingleResult();
    }
    
    public static List<PM> PM.findAllPMS() {
        return entityManager().createQuery("SELECT o FROM PM o", PM.class).getResultList();
    }
    
    public static List<PM> PM.findAllPMS(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM PM o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, PM.class).getResultList();
    }
    
    public static PM PM.findPM(Long id) {
        if (id == null) return null;
        return entityManager().find(PM.class, id);
    }
    
    public static List<PM> PM.findPMEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM PM o", PM.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<PM> PM.findPMEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM PM o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, PM.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public PM PM.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        PM merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
